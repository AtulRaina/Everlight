// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Everlight.Feature
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeleteComputerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "DeleteComputer.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeleteComputer", "Delete Existing Computer", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DeleteComputer")))
            {
                global::Everlight.Feature.DeleteComputerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Computer Can be deleted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeleteComputer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Delete")]
        public virtual void ComputerCanBeDeleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Computer Can be deleted", new string[] {
                        "Delete"});
#line 5
  this.ScenarioSetup(scenarioInfo);
#line 6
    testRunner.Given("I am at home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
      testRunner.And("A computer with name Test Delete exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
      testRunner.And("I Filter computer with Test Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
      testRunner.And("I select the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
     testRunner.When("I Click Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
     testRunner.Then("the computer is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Multiple Computers can Be Deleted in the same session")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeleteComputer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Delete")]
        public virtual void MultipleComputersCanBeDeletedInTheSameSession()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple Computers can Be Deleted in the same session", new string[] {
                        "Delete"});
#line 14
 this.ScenarioSetup(scenarioInfo);
#line 15
    testRunner.Given("I am at home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
      testRunner.And("A computer with name JAVA exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
   testRunner.And("A computer with name PYTHON exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.And("A computer with name C# exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
   testRunner.And("A computer with name C++ exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
      testRunner.And("I Filter computer with JAVA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
      testRunner.And("I select the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
     testRunner.When("I Click Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
     testRunner.Then("the computer is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
  testRunner.Given("I Filter computer with PYTHON", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
      testRunner.And("I select the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
     testRunner.When("I Click Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
     testRunner.Then("the computer is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
   testRunner.Given("I Filter computer with C#", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
      testRunner.And("I select the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
     testRunner.When("I Click Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
     testRunner.Then("the computer is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
   testRunner.Given("I Filter computer with C++", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
      testRunner.And("I select the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
     testRunner.When("I Click Delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
     testRunner.Then("the computer is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion


